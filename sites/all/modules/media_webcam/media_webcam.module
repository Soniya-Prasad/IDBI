<?php

/**
 * @file media_webcam/media_webcam.module
 * Provides a Webcam video and image capturing widget to Filefield.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_webcam.variables.inc');

/**
 * Implementation of hook_menu().
 */
function media_webcam_menu() {
  return array(
    'admin/config/media/media_webcam' => array(
      'title' => 'Media: Webcam',
      'description' => 'Administer the Media: Webcam module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_webcam_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/media_webcam.admin.inc',
    ),
  );
}

/**
 *  Implements hook_theme().
 */
function media_webcam_theme($existing, $type, $theme, $path) {
  return array(
    'media_webcam_widget' => array(
      'render element' => 'element',
      'file' => 'media_webcam.theme.inc',
      'path' => $path .'/includes/themes',
      'template' => 'media-webcam-widget'
    ),
    'media_webcam_button' => array(
      'variables' => array('type' => NULL, 'output' => NULL),
      'file' => 'media_webcam.theme.inc',
      'path' => $path .'/includes/themes',
      'template' => 'media-webcam-button'
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function media_webcam_field_widget_info() {
  return array(
    'media_webcam' => array(
      'label' => t('Webcam Image & Video Capture'),
      'field types' => array('file'),
      'settings' => array(
        'allow_video' => TRUE,
        'allow_snapshot' => TRUE
      )
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
*/
function media_webcam_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  if ($widget['type'] == 'media_webcam') {
    $form['allow_video'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow video'),
      '#description' => t('If checked, then this field will allow for webcam video recordings to be saved locally as .flv files.'),
      '#default_value' => $settings['allow_video'],
    );
    $form['allow_snapshot'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow snapshot'),
      '#description' => t('If checked, then this field will allow for webcam photo snapshots to be saved locally as .jpg files.'),
      '#default_value' => $settings['allow_snapshot'],
    );
  }
  return $form;
}

/**
 * Implements of hook_field_widget_form().
 */
function media_webcam_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  switch ($widget['type']) {
    case 'media_webcam':
      $element += array(
        '#type' => 'media_webcam_widget',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
      );
    break;
  }
  return $element;
}

/**
 * Implementation of FAPI hook_element_info().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function media_webcam_element_info() {
  return array(
    'media_webcam_widget' => array(
      '#input' => TRUE,
      '#process' => array('media_webcam_widget_element_process'),
      '#element_validate' => array('media_webcam_widget_element_validate'),
      '#theme_wrappers' => array('media_webcam_widget'),
    ),
  );
}

function media_webcam_widget_element_validate($element, &$form_state) {
  // @TODO: Anything to validate?
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function media_webcam_widget_element_process($element, &$form_state, $form) {
  $field_key = $element['#columns'][0];
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  $field = field_info_field($element['#field_name']);
  $form_element = $element['#field_name'] .'_'. $element['#delta'];
  
  // Save any video that's been uploaded to the Red5 streams folder.
  if ($instance['widget']['settings']['allow_video'] && !empty($element['#value']['media_webcam_red5'])) {
    global $user;

    // Borrowed from file_save_upload
    $file = new stdClass();
    $file->uid      = $user->uid;
    $file->status   = 0;
    $file->filename = $element['#value']['media_webcam_red5'] .'.flv';
    $file->filepath = media_webcam_variable_get('upload_folder') .'/'. $file->filename;
    $file->uri      = 'file://'. $file->filepath;
    $file->filemime = file_get_mimetype($file->filename);
    $file->filesize = filesize($file->filepath);
    $file->status = FILE_STATUS_PERMANENT;
    $file->timestamp = time();
    
    // The full path + filename where the video resides.
    // Set the destination path and ensure it exists, creating if necessary.
    $destination = file_field_widget_uri($field, $instance) .'/'. media_webcam_variable_get('file_directory');
    if (file_prepare_directory($destination, FILE_CREATE_DIRECTORY) && ($file = file_move($file, $destination .'/'. $file->filename))) {
      // Set the other file properties and record the file object.
      file_save($file);
      if ($file->fid) {
        // Set the element value to the new fid.
        $file->display = $file->description = 0;
        $element['#value'] = $element['#default_value'] = (array)$file;

        // Ensure the value is saved to filefield.
        $element['#post'][$element['#field_name']][$element['#delta']][$field_key] = $file->fid;
        $element['#post'][$element['#field_name']][$element['#delta']]['display'] = 0;
        $element['#post'][$element['#field_name']][$element['#delta']]['description'] = 0;

        // Blank out the red5 app value, since we've moved the file.
        $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_red5'] = '';
        $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_snap'] = '';
      }
      else {
        form_set_error($form_element, t('There was a problem recording your video. Please try again, or contact the site administrator if you still have an issue.'));
      }
    }
  }
  elseif ($instance['widget']['settings']['allow_snapshot'] && !empty($element['#value']['media_webcam_snap'])) {
    // Save and record the file.
    $file = media_webcam_save_image($element['#value']['media_webcam_snap'], $form_element, $field, $instance);
    if ($file->fid) {
      // Set the element value to the new fid.
      $file->display = $file->description = 0;
      $element['#value'] = $element['#default_value'] = (array)$file;

      // Ensure the value is saved to filefield.
      $element['#post'][$element['#field_name']][$element['#delta']][$field_key] = $file->fid;
      $element['#post'][$element['#field_name']][$element['#delta']]['display'] = 0;
      $element['#post'][$element['#field_name']][$element['#delta']]['description'] = 0;

      // Blank out the red5 app value, since we've moved the file.
      $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_red5'] = '';
      $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_snap'] = '';
    }
  }

  $element['#attributes']['id'] = $element['#id'] .'-ahah-wrapper';
  $element['#prefix'] = '<div '. drupal_attributes($element['#attributes']) .'>';
  $element['#suffix'] = '</div>';
  $element['display'] = $element['description'] = array(
    '#type' => 'value',
    '#value'=> 0
  );
  $element[$field_key] = array(
    '#type' => 'value',
    '#value' => isset($element['#default_value']) ? $element['#default_value']['fid'] : '',
    '#attributes' => array(
      'class' => 'media-webcam-'. $field_key,
    ),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#bundle' => $element['#bundle'],
    '#entity_type' => $element['#entity_type'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if ($instance['widget']['settings']['allow_video']) {
    $element['media_webcam_red5'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => 'media-webcam-red5',
      ),
    );
  }
  if ($instance['widget']['settings']['allow_snapshot']) {
    $element['media_webcam_snap'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => 'media-webcam-snap-textarea',
      ),
    );
  }
  module_load_include('inc', 'media_webcam', 'includes/themes/media_webcam.theme');
  drupal_add_js(array('mediaWebcam' => array('element' => array($element['#attributes']['id']))), 'setting');

  return $element;
}

/**
 * Util to save the image
*/
function media_webcam_save_image($image, $form_element, $field, $instance) {
  $image = str_replace('data:image/jpeg;base64,', '', $image);
  if (!$image) {
    form_set_error($form_element, t('There was a problem uploading your snapshot. Please try again, or contact the site administrator.'));
    return FALSE;
  }
  else {
    $base64 = base64_decode($image, TRUE);
    if ($base64) {
      if ($directory = media_webcam_variable_get('file_directory')) {
        // Create the opalcanvas folder within the files folder.
        $destination = file_field_widget_uri($field, $instance) .'/'. media_webcam_variable_get('file_directory');
        file_prepare_directory($path, FILE_CREATE_DIRECTORY);
      }
      // Begin building file object.
      $file = new stdClass();

      // Attempt to save the image.
      if ($file->filepath = file_save_data($base64, $path .'/media-webcam-image-'. time() .'.jpg')) {
        global $user;
        $file->uid = $user->uid;
        $file->filename = basename($file->filepath);
        $file->uri = file_field_widget_uri($field, $instance);
        $file->filemime = file_get_mimetype($file->filename);
        $file->source = 'media_webcam_save_image';
        $file->destination = $file->filepath;
        $file->filesize = strlen($image);
        $file->timestamp = time();

        // Note the file is currently saved as a temporary file.
        file_save($file);
        return $file;
      }
      else {
        form_set_error($form_element, t('There was an error when attempting to save your snapshot. Please try again, or contact the site administrator.'));
        return FALSE;
      }
    }
    else {
      form_set_error($form_element, t('The snapshot image data was corrupted. Please try again, or contact the site administrator.'));
      return FALSE;
    }
  }
}

/**
 * Add the Media: Webcam JavaScript settings and basic JS & CSS files.
 */
function media_webcam_add_js($settings = array()) {
  static $added;

  // Only add the base files & settings once.
  if (!isset($added)) {
    $path = drupal_get_path('module', 'media_webcam');

    // The path to the Webcam Uploader flash.
    $webcamPath = url($path .'/src/media_webcam/bin/webcam.swf');
    // @TODO: Use the library path for this instead, from swfojbject.
    $expressInstallPath = url($path .'/src/media_webcam/bin/expressInstall.swf');

    // Add the base JS settings.
    $base_settings = array(
      'mediaWebcam' => array(
        'webcamPath' => $webcamPath,
        'expressInstallPath' => $expressInstallPath,
      ),
    );
    drupal_add_js($base_settings, 'setting');

    // Add the necessary files.
    // @TODO: Use the library path for swfobject instead.
    drupal_add_js($path .'/src/media_webcam/bin/js/swfobject.js');
    drupal_add_js($path .'/includes/themes/js/media_webcam.js');
    drupal_add_css($path .'/includes/themes/css/media_webcam.css');

    $added = TRUE;
  }

  if (!empty($settings)) {
    drupal_add_js($settings, 'setting');
  }
}
